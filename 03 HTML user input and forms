Form process:
Browser sends http request response cycle to server
to send data to the server, we use get(data at the end of url, not safe) and post(data in content, HTTPS) method


Form validation: 
Input data is valid
Client side validation: Client-side validation checks for errors as soon as they are typed into the form. This is done by the web browser or by JavaScript code, and provide the user with immediate feedback. if there are errors, an error message will alert the user of the invalid data and how to change it for successful submission. For example, you decide to use the input element with its type attributes set to email. If the user does not enter a valid email address, the web browser will display an error message informing them that the data they entered is not a valid email address 
Server side validation:  checks for errors after the data has been submitted to the web server. Server-side validation is more secure because it prevents malicious users from tampering with your website's code and submitting invalid data to your server. When the form data is received by the web server, the backend will validate the data before processing it. This validation can run more complex checks, such as checking the data against a database, or validating the data against business requirements. Most websites use both client-side and server-side validation to provide immediate feedback to users, but also to protect against malicious data submission and to ensure data integrity

Input types

<input type="button">
<input type="checkbox" id="vehicle3" name="vehicle3" value="Boat">
 Checkboxes let a user select ZERO or MORE options of a limited number of choices.
  <input type="color" id="favcolor" name="favcolor">  is used for input fields that should contain a color.
  <input type="date" id="birthday" name="birthday">
  <input type="datetime-local" id="birthdaytime" name="birthdaytime">  specifies a date and time input field, with no time zone. Depending on browser support, a date picker can show up in the input field.
<input type="email"> Depending on browser support, the e-mail address can be automatically validated when submitted. Some smartphones recognize the email type, and add ".com" to the keyboard to match email input.
  <input type="file" id="myfile" name="myfile"> defines a file-select field and a "Browse" button for file uploads.
  <input type="hidden" id="custId" name="custId" value="3487">  defines a hidden input field (not visible to a user). A hidden field lets web developers include data that cannot be seen or modified by users when a form is submitted. A hidden field often stores what database record that needs to be updated when the form is submitted. Note: While the value is not displayed to the user in the page's content, it is visible (and can be edited) using any browser's developer tools or "View Source" functionality. Do not use hidden inputs as a form of security!
<input type="image" src="img_submit.gif" alt="Submit" width="48" height="48"> defines an image as a submit button. The path to the image is specified in the src attribute.
<input type="month">
  <input type="number" id="quantity" name="quantity" min="1" max="5"> You can also set restrictions on what numbers are accepted. The following example displays a numeric input field, where you can enter a value from 1 to 5:
  <input type="password" id="pwd" name="pwd">
  <input type="radio" id="css" name="fav_language" value="CSS">  Radio buttons let a user select ONLY ONE of a limited number of choices:
  <input type="range" id="vol" name="vol" min="0" max="50">
<input type="reset" value="Reset">
  <input type="search" id="gsearch" name="gsearch"> is used for search fields (a search field behaves like a regular text field).
  <input type="submit" value="Submit"> defines a button for submitting form data to a form-handler. The form-handler is typically a server page with a script for processing input data. The form-handler is specified in the form's action attribute:
<input type="tel" id="phone" name="phone" pattern="[0-9]{3}-[0-9]{2}-[0-9]{3}">
<input type="text" id="lname" name="lname"> defines a single-line text input field:
  <input type="time" id="appt" name="appt">
  <input type="url" id="homepage" name="homepage"> is used for input fields that should contain a URL address. Depending on browser support, the url field can be automatically validated when submitted. Some smartphones recognize the url type, and adds ".com" to the keyboard to match url input.
<input type="week">

The HTML <form> Elements:
<input>
The <input> element can be displayed in several ways, depending on the type attribute.
<input type="text" id="fname" name="fname">

<label>
The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.
The for attribute of the <label> tag should be equal to the id attribute of the <input> element to bind them together.
<label for="cars">Choose a car:</label>
<select id="cars" name="cars">

<select> The <select> element defines a drop-down list:
<select id="cars" name="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>  The <option> element defines an option that can be selected.


Visible Values:
Use the size attribute to specify the number of visible values:
<select id="cars" name="cars" size="3">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>
  <option value="audi">Audi</option>


Allow Multiple Selections:
Use the multiple attribute to allow the user to select more than one value:
<select id="cars" name="cars" size="4" multiple>
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="fiat">Fiat</option>


<textarea>
The <textarea> element defines a multi-line input field (a text area):
<textarea name="message" rows="10"(lines) cols="30" (width)>The cat was playing in the garden.</textarea>

<button>The <button> element defines a clickable button:
<button type="button" onclick="alert('Hello World!')">Click Me!</button>

<fieldset>The <fieldset> element is used to group related data in a form.
<legend>The <legend> element defines a caption for the <fieldset> element.
<fieldset>
    <legend>Personalia:</legend>
    <label for="fname">First name:</label><br>
    <input type="text" id="fname" name="fname" value="John"><br>


<datalist>The <datalist> element specifies a list of pre-defined options for an <input> element.
<form action="/action_page.php">
  <input list="browsers">
  <datalist id="browsers">
    <option value="Edge">
    <option value="Firefox">


<output> element represents the result of a calculation (like one performed by a script).
<form action="/action_page.php" oninput="x.value=parseInt(a.value)+parseInt(b.value)">
  0 <input type="range"  id="a" name="a" value="50"> 100 +
  <input type="number" id="b" name="b" value="50">
  = <output name="x" for="a b"></output>


<option>
<optgroup>



Attribute	Description
checked	- Specifies that an input field should be pre-selected when the page loads (for type="checkbox" or type="radio")
disabled- 	Specifies that an input field should be disabled
max	-Specifies the maximum value for an input field
maxlength-	Specifies the maximum number of character for an input field
min	-Specifies the minimum value for an input field
pattern	-Specifies a regular expression to check the input value against
readonly-	Specifies that an input field is read only (cannot be changed)
required	-Specifies that an input field is required (must be filled out)
size-	Specifies the width (in characters) of an input field
step-	Specifies the legal number intervals for an input field
value-	Specifies the default value for an input field

The following example displays a numeric input field, where you can enter a value from 0 to 100, in steps of 10. The default value is 30:
<form>
  <label for="quantity">Quantity:</label>
  <input type="number" id="quantity" name="quantity" min="0" max="100" step="10" value="30">
</form>

---------------------
HTML Input Attributes
The value Attribute
  <input type="text" id="lname" name="lname" value="Doe">
The input value attribute specifies an initial value for an input field:

The readonly Attribute
  <input type="text" id="fname" name="fname" value="John" readonly><br>
The input readonly attribute specifies that an input field is read-only.
A read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).
The value of a read-only input field will be sent when submitting the form!

The disabled Attribute
  <input type="text" id="fname" name="fname" value="John" disabled><br>
The input disabled attribute specifies that an input field should be disabled.
A disabled input field is unusable and un-clickable.
The value of a disabled input field will not be sent when submitting the form!

The size Attribute
  <input type="text" id="pin" name="pin" size="4">
The input size attribute specifies the visible width, in characters, of an input field.
The default value for size is 20.
Note: The size attribute works with the following input types: text, search, tel, url, email, and password.

The maxlength Attribute
  <input type="text" id="pin" name="pin" maxlength="4" size="4">
The input maxlength attribute specifies the maximum number of characters allowed in an input field.
Note: When a maxlength is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code.

The min and max Attribute
  <input type="date" id="datemax" name="datemax" max="1979-12-31"><br><br>
The input min and max attributes specify the minimum and maximum values for an input field.
The min and max attributes work with the following input types: number, range, date, datetime-local, month, time and week.
Tip: Use the max and min attributes together to create a range of legal values.

The multiple Attribute
  <input type="file" id="files" name="files" multiple>
The input multiple attribute specifies that the user is allowed to enter more than one value in an input field.
The multiple attribute works with the following input types: email, and file.

The pattern Attribute
  <input type="text" id="country_code" name="country_code"
  pattern="[A-Za-z]{3}" title="Three letter country code">
The input pattern attribute specifies a regular expression that the input field's value is checked against, when the form is submitted.
The pattern attribute works with the following input types: text, date, search, url, tel, email, and password.
Tip: Use the global title attribute to describe the pattern to help the user.
Tip: Learn more about regular expressions in our JavaScript tutorial.


The placeholder Attribute
<input type="tel" id="phone" name="phone" placeholder="123-45-678" pattern="[0-9]{3}-[0-9]{2}-[0-9]{3}">
The input placeholder attribute specifies a short hint that describes the expected value of an input field (a sample value or a short description of the expected format).
The short hint is displayed in the input field before the user enters a value.
The placeholder attribute works with the following input types: text, search, url, number, tel, email, and password.

The required Attribute
  <input type="text" id="username" name="username" required>
The input required attribute specifies that an input field must be filled out before submitting the form.
The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.

he step Attribute
  <input type="number" id="points" name="points" step="3">
The input step attribute specifies the legal number intervals for an input field.
Example: if step="3", legal numbers could be -3, 0, 3, 6, etc.
Tip: This attribute can be used together with the max and min attributes to create a range of legal values.
The step attribute works with the following input types: number, range, date, datetime-local, month, time and week.

The autofocus Attribute
  <input type="text" id="fname" name="fname" autofocus><br> fname will be bold box
The input autofocus attribute specifies that an input field should automatically get focus when the page loads.

The list Attribute
<input list="browsers">
  <datalist id="browsers">
    <option value="Edge">
    <option value="Firefox">
The input list attribute refers to a <datalist> element that contains pre-defined options for an <input> element.

The autocomplete Attribute
<form action="/action_page.php" autocomplete="on">
The input autocomplete attribute specifies whether a form or an input field should have autocomplete on or off.
Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.
The autocomplete attribute works with <form> and the following <input> types: text, search, url, tel, email, password, datepickers, range, and color.

The formaction Attribute
<form action="/action_page.php">
  <input type="submit" formaction="/action_page2.php" value="Submit as Admin">
The input formaction attribute specifies the URL of the file that will process the input when the form is submitted.
Note: This attribute overrides the action attribute of the <form> element.

The formenctype Attribute
<form action="/action_page_binary.asp" method="post">
  <input type="submit" value="Submit">
  <input type="submit" formenctype="multipart/form-data"
  value="Submit as Multipart/form-data">
The input formenctype attribute specifies how the form-data should be encoded when submitted (only for forms with method="post").

The formmethod Attribute
The input formmethod attribute defines the HTTP method for sending form-data to the action URL.
The formmethod attribute works with the following input types: submit and image.
The form-data can be sent as URL variables (method="get") or as an HTTP post transaction (method="post").
Notes on the "get" method:
   This method appends the form-data to the URL in name/value pairs
   This method is useful for form submissions where a user want to bookmark the result
   There is a limit to how much data you can place in a URL (varies between browsers), therefore, you cannot be sure that all of the form-data will be correctly transferred
   Never use the "get" method to pass sensitive information! (password or other sensitive information will be visible in the browser's address bar)
Notes on the "post" method:
   This method sends the form-data as an HTTP post transaction
   Form submissions with the "post" method cannot be bookmarked
   The "post" method is more robust and secure than "get", and "post" does not have size limitations
<form action="/action_page.php" method="get">
  <label for="lname">Last name:</label>
  <input type="text" id="lname" name="lname"><br><br>
  <input type="submit" value="Submit using GET">
  <input type="submit" formmethod="post" value="Submit using POST">


The formtarget Attribute
<form action="/action_page.php">
  <input type="text" id="lname" name="lname"><br><br>
  <input type="submit" value="Submit">
  <input type="submit" formtarget="_blank" value="Submit to a new window/tab">
The input formtarget attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form.

The formnovalidate Attribute
The input formnovalidate attribute specifies that an <input> element should not be validated when submitted.
<input type="submit" formnovalidate="formnovalidate" value="Submit without validation">


The novalidate Attribute
The novalidate attribute is a <form> attribute.
When present, novalidate specifies that all of the form-data should not be validated when submitted.
<form action="/action_page.php" novalidate>

